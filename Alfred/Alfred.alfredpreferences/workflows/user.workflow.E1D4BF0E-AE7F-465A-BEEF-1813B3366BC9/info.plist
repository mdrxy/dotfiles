<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.stephancasas.AlfredMouselessMessenger</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>273D9F21-78DB-4A57-B29C-4F088C3603B9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>196EF00A-3680-4889-96CE-0627735D7F69</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>33023E6A-7031-4683-AB26-E8A7A11EBD45</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B7C0DFCE-8948-4D89-9C0F-573301CF10D8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F2B5B0E6-32A6-4EEE-A8D8-A58ABC175BE5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F2F3EB18-2955-4233-B1BF-5132B22FC4AA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F2F3EB18-2955-4233-B1BF-5132B22FC4AA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>273D9F21-78DB-4A57-B29C-4F088C3603B9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Stephan Casas</string>
	<key>description</key>
	<string>Reply to and preview messages from Alfred.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Mouseless Messenger</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>msg</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading your messages...</string>
				<key>script</key>
				<string>#!/usr/bin/env osascript -l JavaScript

/**
 * -----------------------------------------------------------------------------
 * App Instances
 * -----------------------------------------------------------------------------
 */

const App = Application.currentApplication();
App.includeStandardAdditions = true;

const MessagesApp = Application('Messages');

/**
 * -----------------------------------------------------------------------------
 * Objective-C Bridge Imports / Bindings
 * -----------------------------------------------------------------------------
 */

ObjC.import('Foundation');
ObjC.import('Cocoa');
ObjC.bindFunction('malloc', ['void *', ['int']]);

/**
 * -----------------------------------------------------------------------------
 * Alfred Workflow Constants and Helpers
 * -----------------------------------------------------------------------------
 */

const BUNDLE_ID = App.systemAttribute('alfred_workflow_bundleid');
const CACHE_DIR = App.systemAttribute('alfred_workflow_cache');
const DATA_DIR = App.systemAttribute('alfred_workflow_data');
const INSTALL_DIR = $path(
  App.systemAttribute('alfred_preferences'),
  'workflows',
  App.systemAttribute('alfred_workflow_uid'),
);

/**
 * Create a path from multiple string segments.
 * @param segments The string segments of the path to create.
 * @returns string
 */
function $path(...segments) {
  return segments.join('/').replace(/\s/g, '\\ ');
}

/**
 * Does a path exist and, if so, what's there?
 * @param path The path to test.
 * @returns boolean
 */
function $pathType(path) {
  ObjC.import('Foundation');
  let isDir = Ref();
  $.NSFileManager.alloc.init.fileExistsAtPathIsDirectory(
    Path(path).toString(),
    isDir,
  );
  if (isDir[0]) return 'directory';

  return $.NSFileManager.alloc.init.fileExistsAtPath(Path(path).toString())
    ? 'file'
    : false;
}

/**
 * Safely read data from the disk.
 * @param pathOrCacheKey The path or cache key from which to read.
 * @returns any
 */
function $read(pathOrCacheKey) {
  if (typeof CACHE_DIR !== 'undefined' &amp;&amp; !pathOrCacheKey.match(/\//))
    pathOrCacheKey = `${CACHE_DIR}/${pathOrCacheKey}`;

  let data = App.doShellScript(
    `[ -f "${pathOrCacheKey}" ] &amp;&amp; cat "${pathOrCacheKey}" || printf 'null'`,
  );

  try {
    data = JSON.parse(data);
  } catch (ex) {
    // no-op
  }

  return data;
}

/**
 * Safely write data to the disk.
 * @param pathOrCacheKey The path or cache key to which the data will write.
 * @param data The data to write to disk.
 * @returns any
 */
function $write(pathOrCacheKey, data) {
  if (typeof CACHE_DIR !== 'undefined' &amp;&amp; !pathOrCacheKey.match(/\//))
    pathOrCacheKey = `${CACHE_DIR}/${pathOrCacheKey}`;

  // ensure directory exists
  const dir = pathOrCacheKey.split('/').reverse().slice(1).reverse().join('/');
  App.doShellScript(`mkdir -p "${dir}"`);

  // write data
  $(
    typeof data !== 'string' ? JSON.stringify(data) : data,
  ).writeToFileAtomicallyEncodingError(
    pathOrCacheKey,
    $(false),
    $.NSUTF8StringEncoding,
    $(),
  );

  return data;
}

/**
 * -----------------------------------------------------------------------------
 * Workflow Logic Helpers
 * -----------------------------------------------------------------------------
 */

const GH_BASE_URL = 'https://github.com';
const GH_CONTENT_BASE_URL = 'https://raw.githubusercontent.com';
const REPOSITORY = 'stephancasas/alfred-mouseless-messenger';

const CACHE = {};

function resolveColorScheme(scheme = '') {
  let preference = App.systemAttribute('alfred_mm_prefers_color_scheme');
  preference = !preference.match(/(dark|light)/i)
    ? App.doShellScript(`defaults read -g AppleInterfaceStyle`).match(/dark/gi)
      ? 'dark'
      : 'light'
    : preference.toLowerCase().trim();

  return {
    light: {
      body: { text: '#242424', bg: '#FFFFFF' },
      received: {
        bg: '#E9E9EB',
      },
      sms: {
        bg: '#34C759',
      },
      imessage: {
        bg: '#057DFE',
      },
      timestamp: '#808080',
    },
    dark: {
      body: { text: '#FFFFFF', bg: '#1E1E1E' },
      received: { bg: '#3B3A3D' },
      sms: {
        bg: '#34C759',
      },
      imessage: {
        bg: '#0C84FF',
      },
      timestamp: '#999999',
    },
  }[scheme || preference];
}

function unserializeMessageBody(mBody) {
  if (!mBody.length) {
    return 'Message un-sent by chat participant.';
  }

  const bytes = [];
  for (let c = 0; c &lt; mBody.length; c += 2)
    bytes.push(parseInt(mBody.substr(c, 2), 16));

  const $bytes = $.malloc(bytes.length);
  for (let i = 0; i &lt; bytes.length; i++) {
    $bytes[i] = bytes[i];
  }

  const txtBody = $.NSUnarchiver.alloc
    .initForReadingWithData($.NSData.dataWithBytesLength($bytes, bytes.length))
    .decodeTopLevelObjectAndReturnError(0).string;

  return ObjC.unwrap(txtBody);
}

function convertMessageTimestamp(timestamp, string = false) {
  let d = new Date(0);
  if (timestamp instanceof Date) {
    d = timestamp;
  } else {
    d.setTime(new Date('2001-01-01').getTime() + parseInt(timestamp / 1000000));
  }

  return string
    ? Intl.DateTimeFormat('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
      }).format(d)
    : d;
}

function getMessageHistoryOption() {
  let history = App.systemAttribute('alfred_mm_message_history');
  history = parseInt(history);

  return isNaN(history) ? 14 : history;
}

function getMessages() {
  if ('messages' in CACHE) return CACHE.messages;

  const HISTORY = getMessageHistoryOption();

  const QUERY = `\
    SELECT json_object(\
      'message_id', message.ROWID,\
      'message_body_serialized', HEX(message.attributedBody),\
      'sent', message.is_from_me,\
      'is_attachment', message.cache_has_attachments,\
      'date', message.date,\
      'chat_id', chat.ROWID,\
      'chat_guid', chat.guid\
    ) AS json\
    FROM (\
      SELECT message_id, chat_id, ROW_NUMBER()\
        OVER (\
          PARTITION BY chat_id\
            ORDER BY message_id DESC\
        ) AS row_num\
        FROM chat_message_join\
          WHERE chat_id IN (\
            SELECT chat_id\
              FROM chat_message_join\
                WHERE message_id IN (\
                  SELECT MAX(message_id)\
                    FROM chat_message_join\
                    GROUP BY chat_id\
                    ORDER BY message_id DESC\
                    LIMIT 14\
                )\
          )\
    ) chat_message_join\
    JOIN message ON chat_message_join.message_id = message.ROWID\
    JOIN chat ON chat_message_join.chat_id = chat.ROWID\
      WHERE row_num &lt; ${HISTORY + 1}
      ORDER BY message_id DESC;`;

  const messages = JSON.parse(
    `[${App.doShellScript(
      `sqlite3  -newline "," ~/Library/Messages/chat.db "${QUERY}"`,
    ).replace(/,$/, '')}]`,
  );

  CACHE.messages = messages.map((chat) =&gt;
    Object.assign(chat, {
      message_body: unserializeMessageBody(chat.message_body_serialized),
      chat_platform: !!chat.chat_guid.match(/imessage/i) ? 'imessage' : 'sms',
    }),
  );

  return CACHE.messages;
}

function getChatHTML() {
  if ('html' in CACHE) return CACHE.html;

  const colorScheme = resolveColorScheme();
  const printScheme = resolveColorScheme('light');

  const TEMPLATE = `&lt;!DOCTYPE html&gt;
    &lt;html lang="en"&gt;
      &lt;head&gt;
        &lt;script&gt;var chat;&lt;/script&gt;
        &lt;title&gt;Conversation&lt;/title&gt;
        &lt;style&gt;
          html,
          body {
            margin: 0;
            padding: 0;
            color: ${colorScheme.body.text};
            background-color: ${colorScheme.body.bg};
          }
          #conversation {
            display: flex;
            padding-left: 0.5rem;
            padding-right: 0.5rem;
            flex-direction: column;
            font-family: sans-serif;
            font-size: 0.875rem;
            line-height: 1.25rem;
            height: 100vh;
          }
          #filler {
              display: flex;
              align-items: center;
              flex-grow: 1;
          }
          .message {
            padding-top: 0.3rem;
            padding-bottom: 0.3rem;
            padding-left: 0.6rem;
            padding-right: 0.6rem;
            border-radius: 12px;
            max-width: 70%;
            text-align: justify;
            margin-top: 0.3rem;
            margin-bottom: 0.3rem;
          }
          .received {
            margin-right: auto;
            border-bottom-left-radius: 0;
          }
          .message.received {
            background-color: ${colorScheme.received.bg};
          }
          .sent {
            border-bottom-right-radius: 0;
            margin-left: auto;
          }
          .message.sent {
              color: #FFFFFF;
          }
          .sms.sent {
            background-color: ${colorScheme.sms.bg};
          }
          .imessage.sent {
            background-color: ${colorScheme.imessage.bg};
          }
          .hidden {
              display: none;
          }
          .timestamp {
            font-size: 0.6rem;
            line-height: 1rem;
            text-align: center;
            font-weight: bold;
            color: ${colorScheme.timestamp}
          }
          .timestamp.sent, .timestamp.received {
            text-align: left;
          }
          @media print {
            html, body {
                color: ${printScheme.body.text};
                background-color: ${printScheme.body.bg};
            }
            #filler {
                display: none;
            }
            .message.received {
                background-color: ${printScheme.received.bg};
            }
            .sms.sent {
                background-color: ${printScheme.sms.bg};
            }
            .imessage.sent {
                background-color: ${printScheme.imessage.bg};
            }
            .timestamp {
                color: ${printScheme.timestamp};
            }
          }
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body id="conversation"&gt;
        &lt;div id="filler"&gt;
          &lt;span style="margin-left: auto; margin-right: auto;"&gt;
            Last ${getMessageHistoryOption()} messages shown. Open Messages app to see more.
          &lt;/span&gt;
        &lt;/div&gt;
        &lt;div&gt;&lt;div style="height: .5rem;"&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;x-conversation /&gt;
        &lt;div&gt;&lt;div style="height: .5rem;"&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;/body&gt;
      &lt;script&gt;
        window.scrollTo(0, document.body.scrollHeight);
      &lt;/script&gt;
    &lt;/html&gt;`;

  let chats = getMessages();

  // 'periodic' | 'full' | 'none'
  const tsStyle = App.systemAttribute('alfred_mm_ts_style') || 'periodic';

  const lastDateMap = {};
  const createTimestampHtml = (date, sent, chat_id) =&gt; {
    if (tsStyle.toLowerCase() == 'none') return '';

    // reset periodic for new chat
    if (!lastDateMap[`${chat_id}`]) {
      lastDateMap[`${chat_id}`] = null;
    }

    date = convertMessageTimestamp(date);
    if (
      (tsStyle == 'periodic' &amp;&amp; date - lastDateMap[`${chat_id}`] &gt; 1800000) ||
      !lastDateMap[`${chat_id}`] ||
      tsStyle == 'full'
    ) {
      lastDateMap[`${chat_id}`] = date;
      const align = tsStyle == 'periodic' ? '' : sent ? ' sent' : ' received';

      return `&lt;div class="timestamp${align} ${chat_id} hidden"&gt;${convertMessageTimestamp(
        date,
        true,
      )}&lt;/div&gt;
      `;
    }

    return '';
  };

  let conversationHtml = chats
    .reverse()
    .reduce(
      (
        acc,
        { message_body, sent, is_attachment, chat_id, chat_platform, date },
        i,
      ) =&gt; {
        const ts = createTimestampHtml(date, sent, chat_id);
        return `${acc}${i ? '\r      ' : ''}${ts}&lt;div class="${
          sent ? 'sent' : 'received'
        } message ${chat_platform} ${chat_id} hidden"&gt;${
          is_attachment
            ? '&lt;i&gt;Media Attachment&lt;/i&gt;'
            : (message_body ?? '').replace(/\\n/g, '&lt;br&gt;')
        }&lt;/div&gt;`;
      },
      '',
    );

  // entity-encode emoji chars
  const emojis = conversationHtml.match(
    // ref: https://stackoverflow.com/q/10992921
    /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,
  );
  if (!!emojis)
    conversationHtml = emojis
      .map((emoji) =&gt; ({ emoji, html: `&amp;#${emoji.codePointAt(0)};` }))
      .reduce(
        (acc, { emoji, html }) =&gt; acc.replace(emoji, html),
        conversationHtml,
      );

  CACHE.html = TEMPLATE.replace('&lt;x-conversation /&gt;', conversationHtml);
  return CACHE.html;
}

/**
 * -----------------------------------------------------------------------------
 * Workflow Run Handler (Main Logic)
 * -----------------------------------------------------------------------------
 */

function run(_) {
  const chats = [...new Set(getMessages().map((message) =&gt; message.chat_id))]
    .map((chatId) =&gt; {
      const msg = getMessages().find(({ chat_id }) =&gt; chat_id === chatId);
      const { chat_guid } = msg;

      const osaChat = MessagesApp.chats.byId(msg.chat_guid);

      // verify valid chat guid
      try {
        osaChat.properties();
      } catch (ex) {
        return {};
      }

      const isGroup = chat_guid.includes(';chat');
      const buddies =
        osaChat.participants[`${isGroup ? 'first' : 'full'}Name`]();
      const chat_title = `${isGroup ? 'Group c' : 'C'}hat with ${
        isGroup
          ? `${buddies.reverse().slice(1).join(', ')} and ${
              buddies.reverse().slice(-1)[0]
            }`
          : buddies
      }`;

      return Object.assign(msg, { chat_title });
    })
    .filter(({ chat_title }) =&gt; !!chat_title);

  const sedCmd = [];
  const items = chats.map(
    ({
      chat_guid,
      chat_id,
      is_attachment,
      message_body,
      sent,
      chat_platform,
      chat_title,
    }) =&gt; {
      const icon = !sent ? 'received' : `sent-${chat_platform}`;
      const subtitle = is_attachment ? 'Media Attachment' : message_body;

      const preview_path = `${CACHE_DIR}/${chat_title}.html`;
      const cmd = [
        `sed 's/${chat_id} hidden//g'`,
        `"${CACHE_DIR}/chat-preview.html"`,
        `&gt;`,
        `"${preview_path}"`,
      ].join(' ');

      sedCmd.push(`${cmd} &amp;`);

      const dto = (activity) =&gt;
        JSON.stringify({
          chat_guid,
          chat_id,
          chat_title,
          chat_platform,
          is_attachment,
          message_body,
          sent,
          subtitle,
          preview_path,
          activity,
        });

      return {
        title: chat_title.replace(/^(.*?)\swith\s/i, ''),
        subtitle,
        valid: true,
        icon: {
          path: `${icon}.png`,
        },
        match: chat_title,
        arg: '',
        variables: {
          alfred_mm_dto: dto('reply'),
        },
        quicklookurl: preview_path,
        mods: Object.assign(
          {
            alt: {
              subtitle:
                "Press enter to export this conversation's HTML preview to your Downloads folder.",
              valid: true,
              arg: '',
              variables: {
                alfred_mm_dto: dto('export_html'),
              },
            },
          },
          // offer pdf export only if chrome is installed
          !$pathType(
            '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
          )
            ? {
                cmd: {
                  subtitle:
                    'Please install Google Chrome to enable PDF exporting of conversation previews.',
                  valid: false,
                },
              }
            : {
                cmd: {
                  subtitle:
                    "Press enter to export this conversation's PDF preview to your Downloads folder.",
                  valid: true,
                  arg: '',
                  variables: {
                    alfred_mm_dto: dto('export_pdf'),
                  },
                },
              },
        ),
      };
    },
  );

  const lastMessage = getMessages()[0].message_id;
  const lastPrefsUpdate = $pathType(`${INSTALL_DIR}/prefs.plist`)
    ? App.doShellScript(`date -r "${INSTALL_DIR}/prefs.plist" +%s`)
    : 0;

  if (
    $read('last_message') != $write('last_message', lastMessage) ||
    $read('last_prefs_update') != $write('last_prefs_update', lastPrefsUpdate)
  ) {
    $write(`${CACHE_DIR}/chat-preview.html`, getChatHTML());
    App.doShellScript(sedCmd.join(' '));
  }

  return JSON.stringify({ items });
}
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Mouseless Messenger</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>33023E6A-7031-4683-AB26-E8A7A11EBD45</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>#!/usr/bin/env osascript -l JavaScript

const App = Application.currentApplication();
App.includeStandardAdditions = true;

function reply(dto) {
  Application('com.runningwithcrayons.Alfred').runTrigger('reply', {
    inWorkflow: 'com.stephancasas.AlfredMouselessMessenger',
    withArgument: dto,
  });
}

function exportHTML(previewPath) {
  const downloads = `${App.systemAttribute('HOME')}/Downloads`;

  const cmd = ['cp', `"${previewPath}"`, `"${downloads}"`].join(' ');

  App.doShellScript(cmd);
  App.doShellScript(`afplay /System/Library/Sounds/Funk.aiff`);
}

function exportPDF(previewPath, chatTitle) {
  const downloads = `${App.systemAttribute('HOME')}/Downloads`;

  const cmd = [
    `/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome`,
    '--headless',
    `--print-to-pdf='${downloads}/${chatTitle}.pdf'`,
    `'file://${previewPath}'`,
  ].join(' ');

  App.doShellScript(cmd);
  App.doShellScript(`afplay /System/Library/Sounds/Funk.aiff`);
}

function run(_) {
  const dto = App.systemAttribute('alfred_mm_dto');
  const { chat_title, preview_path, activity } = JSON.parse(dto);

  switch (activity) {
    case 'reply_or_preview':
      reply(dto);
      break;

    case 'export_html':
      exportHTML(preview_path);
      break;

    case 'export_pdf':
      exportPDF(preview_path, chat_title);
      break;

    default:
      reply(dto);
      break;
  }
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>B7C0DFCE-8948-4D89-9C0F-573301CF10D8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>availableviaurlhandler</key>
				<false/>
				<key>triggerid</key>
				<string>reply</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>F2B5B0E6-32A6-4EEE-A8D8-A58ABC175BE5</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>#!/usr/bin/env osascript -l JavaScript

const App = Application.currentApplication();
App.includeStandardAdditions = true;

/**
 * Create a path from multiple string segments.
 * @param segments The string segments of the path to create.
 * @returns string
 */
function $path(...segments) {
  return segments.join('/').replace(/\s/g, '\\ ');
}

const INSTALL_DIR = $path(
  App.systemAttribute('alfred_preferences'),
  'workflows',
  App.systemAttribute('alfred_workflow_uid'),
);

function run(argv) {
  const dto = App.systemAttribute('alfred_mm_dto');
  const { chat_title } = JSON.parse(dto);

  return JSON.stringify({
    items: [
      {
        title: `Reply to ${chat_title.split('with')[1].trim()}`,
        subtitle: 'Press enter to send, or escape to cancel.',
        arg: argv[0],
        match: argv[0],
        variables: {
          alfred_mm_reply_body: argv[0],
        },
        icon: {
          path: `${INSTALL_DIR}/send.png`,
        },
      },
    ],
  });
}
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>273D9F21-78DB-4A57-B29C-4F088C3603B9</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>#!/usr/bin/env osascript -l JavaScript

const App = Application.currentApplication();
App.includeStandardAdditions = true;

const Messages = Application('Messages');

function run(argv) {
  const dto = App.systemAttribute('alfred_mm_dto');
  const { chat_guid } = JSON.parse(dto);

  const chat = Messages.chats.byId(chat_guid);
  Messages.send(argv[0], { to: chat });
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>196EF00A-3680-4889-96CE-0627735D7F69</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string></string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>alfred_mm_dto</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>F2F3EB18-2955-4233-B1BF-5132B22FC4AA</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>## Installation

Before the workflow can be used, you'll need to provide Alfred with _Full Disk Access_ privileges via System Preferences:

1. Open System Preferences
2. Choose **Security and Privacy**
3. Choose **Privacy**
4. Select **Full Disk Access**
5. Unlock the 🔒 in the bottom left corner.
6. Enable the checkbox for **Alfred** or use the ➕ button to add Alfred.

### **Privilege Escalation**

Full Disk Access is used to provide Alfred with access to the Messages database. However, by providing Alfred with this access, you are providing **ALL** Alfred workflow with access — not just Mouseless Messenger.

Be sure you trust your installed workflows before allowing this.

## Usage

The workflow is triggered by the keyword `msg`. On run, you'll be provided with your eight (8) most recent conversations in the Messages app.

- To preview a message thread, press the **SHIFT** key while a conversation is selected.

- To reply to a message thread, press the **ENTER** or **RETURN** key while a conversation is selected, then type your reply in the provided input space and press **ENTER** to send it.

    - In order for the message to send, the Messages app must be running in the background. The window doesn't need to be in the foreground (or even visible), but the app itself must be running.

- To export the conversation preview as an HTML document, hold the **OPTION** key while pressing the **ENTER** or **RETURN** key. The conversation preview will be exported to your Downloads folder.

- To export the conversation preview as a PDF document, hold the **COMMAND** key while pressing the **ENTER** or **RETURN** key. The conversation preview will be exported to your Downloads folder.
    - Google Chrome must be installed to use this feature.

## Support the Workflow

I built Mouseless Messenger because I code all day and don't like to take my hands off the keyboard. If you find it useful, please consider [buying me a coffee](https://buymeacoffee.com/stephancasas) so that I can keep building cool things like this.

If you have a feature you'd like added, or an issue which needs attention, please [open an issue here on GitHub](https://github.com/stephancasas/alfred-mouseless-messenger).</string>
	<key>uidata</key>
	<dict>
		<key>196EF00A-3680-4889-96CE-0627735D7F69</key>
		<dict>
			<key>note</key>
			<string>Reply Dispatch</string>
			<key>xpos</key>
			<real>435</real>
			<key>ypos</key>
			<real>180</real>
		</dict>
		<key>273D9F21-78DB-4A57-B29C-4F088C3603B9</key>
		<dict>
			<key>note</key>
			<string>Reply Input</string>
			<key>xpos</key>
			<real>275</real>
			<key>ypos</key>
			<real>180</real>
		</dict>
		<key>33023E6A-7031-4683-AB26-E8A7A11EBD45</key>
		<dict>
			<key>note</key>
			<string>Primary Entry Point</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>25</real>
		</dict>
		<key>B7C0DFCE-8948-4D89-9C0F-573301CF10D8</key>
		<dict>
			<key>note</key>
			<string>Switch</string>
			<key>xpos</key>
			<real>190</real>
			<key>ypos</key>
			<real>25</real>
		</dict>
		<key>F2B5B0E6-32A6-4EEE-A8D8-A58ABC175BE5</key>
		<dict>
			<key>note</key>
			<string>Reply Entry</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>180</real>
		</dict>
		<key>F2F3EB18-2955-4233-B1BF-5132B22FC4AA</key>
		<dict>
			<key>xpos</key>
			<real>195</real>
			<key>ypos</key>
			<real>210</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>system</string>
				<key>pairs</key>
				<array>
					<array>
						<string>Use System Setting</string>
						<string>system</string>
					</array>
					<array>
						<string>Dark</string>
						<string>dark</string>
					</array>
					<array>
						<string>Light</string>
						<string>light</string>
					</array>
				</array>
			</dict>
			<key>description</key>
			<string>Choose the color scheme used to render conversation previews.</string>
			<key>label</key>
			<string>Color Scheme</string>
			<key>type</key>
			<string>popupbutton</string>
			<key>variable</key>
			<string>alfred_mm_prefers_color_scheme</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>periodic</string>
				<key>pairs</key>
				<array>
					<array>
						<string>Periodic</string>
						<string>periodic</string>
					</array>
					<array>
						<string>Every Message</string>
						<string>full</string>
					</array>
					<array>
						<string>None</string>
						<string>none</string>
					</array>
				</array>
			</dict>
			<key>description</key>
			<string>Choose the timestamp style used in conversation previews.</string>
			<key>label</key>
			<string>Timestamp Style</string>
			<key>type</key>
			<string>popupbutton</string>
			<key>variable</key>
			<string>alfred_mm_ts_style</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>10</string>
				<key>pairs</key>
				<array>
					<array>
						<string>10</string>
						<string>10</string>
					</array>
					<array>
						<string>15</string>
						<string>15</string>
					</array>
					<array>
						<string>20</string>
						<string>20</string>
					</array>
					<array>
						<string>30</string>
						<string>30</string>
					</array>
				</array>
			</dict>
			<key>description</key>
			<string>Choose the number of messages included in the conversation preview. 10 usually displays best.</string>
			<key>label</key>
			<string>Message Preview History</string>
			<key>type</key>
			<string>popupbutton</string>
			<key>variable</key>
			<string>alfred_mm_message_history</string>
		</dict>
	</array>
	<key>variables</key>
	<dict>
		<key>alfred_mm_next_update</key>
		<string>1685095523097</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>2.0.3</string>
	<key>webaddress</key>
	<string>https://github.com/stephancasas/alfred-mouseless-messenger</string>
</dict>
</plist>
